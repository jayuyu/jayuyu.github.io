<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reverse</title>
  
  <subtitle>逆流而上，破解安卓玄机</subtitle>
  <link href="https://jayuyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://jayuyu.github.io/"/>
  <updated>2025-03-25T14:27:26.186Z</updated>
  <id>https://jayuyu.github.io/</id>
  
  <author>
    <name>jayuyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>去除花指令</title>
    <link href="https://jayuyu.github.io/posts/4f0/"/>
    <id>https://jayuyu.github.io/posts/4f0/</id>
    <published>2025-03-21T16:00:00.000Z</published>
    <updated>2025-03-25T14:27:26.186Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_5">https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_5</a></p><p><a href="https://blog.csdn.net/abel_big_xu/article/details/117927674">https://blog.csdn.net/abel_big_xu&#x2F;article&#x2F;details&#x2F;117927674</a></p><p>花指令一直是逆向的一个比较常见而多变的东西，对于逆向人员来说也是一个比较大的阻碍，随着反编译工具的升级，现在的IDA9.0已经可以忽视一些花指令正常反编译，不过对于逆向人员还是要掌握</p><p>下面我用原理-&gt;形式-&gt;去除来讲解CTF比赛中经常的花指令</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p> <strong>花指令的核心原理是通过在代码中插入不影响程序实际行为的指令，来迷惑分析者或调试器。它们一般不执行有用的操作</strong>，但能让程序看起来更复杂或者改变程序的行为，从而导致逆向工程的困难。  </p><p>也就是IDA在反编译程序的时候是从函数的入口至上而下一一把机器码转换成汇编语言再变成c语言程序</p><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><h3 id="永真永假跳转"><a href="#永真永假跳转" class="headerlink" title="永真永假跳转"></a>永真永假跳转</h3><p>这种花指令可以说是最基础也是最常见的花指令，</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dummy_function</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这个函数仅作为花指令的目标</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is a dummy function.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    __asm &#123;</span><br><span class="line">        xor eax, eax      </span><br><span class="line">        test eax, eax      </span><br><span class="line">        jz target_label    </span><br><span class="line">        jnz target_label   </span><br><span class="line">        _emit <span class="number">0xe8</span></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    target_label:</span><br><span class="line">        call dummy_function </span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如以上代码，这里正常运行是不会接触到第15行代码，而我们说了IDA的线性扫描，自然会把0xe8当作机器码反编译，这个时候IDA就会看不懂了，就会出现这里的爆红</p><p><img src="/1742824537300-1081ab69-2e5f-4c80-91d1-5d1ad39d513c.png"></p><h4 id="去除方法"><a href="#去除方法" class="headerlink" title="去除方法"></a>去除方法</h4><p>既然会错误的把junkcode反编译，那我们的应对措施自然就是删除这个机器码了，在FA那个标签出先按U，转化成无定义，再把0E8h指令的下面按C，最后删除nop掉这个0E8h就行，记得在函数开头按P正常反编译为函数就行</p><p><img src="/1742824790052-33ee579f-3ee9-467a-8a29-090da4f42da4.png"></p><h3 id="永真永假跳转2"><a href="#永真永假跳转2" class="headerlink" title="永真永假跳转2"></a>永真永假跳转2</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dummy_function</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这个函数仅作为花指令的目标</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is a dummy function.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">_asm &#123;</span><br><span class="line">test eax, <span class="number">0</span>         <span class="comment">// 构造必然条件实现跳转，绕过破坏堆栈平衡的指令</span></span><br><span class="line">jz label</span><br><span class="line">add esp, <span class="number">0x1</span></span><br><span class="line">label:</span><br><span class="line">call dummy_function</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个test eax，0</p><p> 将寄存器 <code>eax</code> 和常数 <code>0</code> 进行按位与运算，但由于与 <code>0</code> 按位与的结果总是 <code>0</code></p><p>所以会直接跳转到label处，不会执行这个add esp，0x1</p><h4 id="去除方法-1"><a href="#去除方法-1" class="headerlink" title="去除方法"></a>去除方法</h4><p>其实这种花指令都不需要怎么去除，一般现在IDA都会自己识别出来，当然，也可以直接删除它绕过的部分</p><h3 id="call-ret"><a href="#call-ret" class="headerlink" title="call&amp;ret"></a>call&amp;ret</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_asm&#123;</span><br><span class="line">   call label</span><br><span class="line">   label:</span><br><span class="line">   add [esp],<span class="number">5</span></span><br><span class="line">   ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用极客大挑战的CPP-flower为例</p><p><img src="/1742873262770-512694e9-f879-47d7-a2cb-f7e4d4b9731b.png"></p><p>可以看见，这里的call419DA6，会跳到这个函数，而且这个函数没有做其他的操作，</p><p><img src="/1742873363751-68228de7-ca5b-4a26-852d-3c6556240883.png"></p><p>仔细观察这里，esp+4是在返回地址处，也就是call指令的下面的地址，之后这个值+12，说明返回地址加了12h，这里手动计算一下，本来的返回地址是</p><p>00419DA1，现在变成了00419DB3，所以正常流程就是这样</p><h4 id="去除方法-2"><a href="#去除方法-2" class="headerlink" title="去除方法"></a>去除方法</h4><p>因为返回地址直接跳到了B3地址，所以我们直接nop掉9C-B2的全部指令就行</p><p><img src="/1742873522082-93192b9e-fdd8-4b46-ae5d-ea0a891c57fe.png"></p><p>这里可以看出红色的地址没有连接上，这样直接去函数开头按u，c，p的话就会只能一半，这里的办法是删除这个sub_419DA6函数</p><p><img src="/1742873744607-c81277ff-44b0-4d6c-8433-20e70a67a5d2.png"></p><p>点击delte function就可以了</p><h3 id="杂糅指令"><a href="#杂糅指令" class="headerlink" title="杂糅指令"></a>杂糅指令</h3><p>我自己取的名字，这种花是比较难的了，有幸在VN赛题里面看到过</p><p><img src="/1742882969563-96d8e460-7e38-4628-8bb7-e0d07854eaf4.png"></p><p>普通的返回值，这个背景是初始化函数，我一直绕不过反调试，所以去找的初始化函数，但是点开汇编却另有玄机</p><p><img src="/1742883034371-1ef84494-d301-4996-989a-64fd4c7b2cf8.png"></p><p>直接爆红了，有反调试</p><p>像这种call    $+5指令的意思就是跳转到call的下一条指令去执行，并且把下面的地址压入栈中当返回地址，这里前面还有push eax 和pop eax</p><h4 id="去除方法-3"><a href="#去除方法-3" class="headerlink" title="去除方法"></a>去除方法</h4><p>所以直接nop掉这个push 到pop</p><p><img src="/1742883647394-264a0b14-6214-453b-bd92-0ecef41dd075.png"></p><p><img src="/1742883660069-792f5b27-4863-4cc4-a8d6-8433e6647dd4-1742912827257-10.png"></p><p>之后正常反编译出来了，这里插一个细节，如果想要修改指令去去除反调试的话直接</p><p><img src="/1742883722000-9916d798-a5a8-4bc5-a006-778b716d061f.png"></p><p>Apply patches to 保存就可以了。</p><h3 id="花指令-异常"><a href="#花指令-异常" class="headerlink" title="花指令+异常"></a>花指令+异常</h3><p><img src="/1742540279039-c9f2fbab-2543-4e30-8aea-1d5794e7f3a6.png"></p><p>这里分析了之后发现如果是调试的话就会直接jmp   eax，如果没有的话就是先加再jmp</p><p>像这种花的话是会影响程序运行的，直接看懂，能调试就行了</p><h3 id="堆区过大"><a href="#堆区过大" class="headerlink" title="堆区过大"></a>堆区过大</h3><p>参考文章</p><p><a href="https://hex-rays.com/blog/igors-tip-of-the-week-147-fixing-stack-frame-is-too-big">https://hex-rays.com/blog/igors-tip-of-the-week-147-fixing-stack-frame-is-too-big</a></p><p><img src="/1741699580098-9ce70f1b-af88-44c7-9785-d478e69a47ca.png"></p><p>这种的代码，入栈的数据太大了，考虑去代码里面找找这个参数，考虑删掉，因为堆区太大影响力编译，当然，也有可能是因为中间在删掉花指令的时候误删了导致的</p><h2 id="idapython自动去除花指令"><a href="#idapython自动去除花指令" class="headerlink" title="idapython自动去除花指令"></a>idapython自动去除花指令</h2><p>如果一个程序花指令过于多的花，就可以尝试idapython直接手动去除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_bytes</span><br><span class="line"></span><br><span class="line">begin = xxxxxx</span><br><span class="line">end = xxxxxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(begin, end):</span><br><span class="line">    <span class="keyword">if</span> idc.get_wide_byte(i) == <span class="number">0x74</span>:          <span class="comment">#修改为机器码</span></span><br><span class="line">        <span class="keyword">if</span> idc.get_wide_byte(i + <span class="number">1</span>) == <span class="number">0xFA</span>:</span><br><span class="line">            ida_bytes.patch_byte(i, <span class="number">0x90</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;junkcode noped at address: 0x&#123;:X&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_5&quot;&gt;https://bbs.kanxue.com/thread-279604.htm#msg_header_h2_5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
      
    
    
    
    <category term="技术" scheme="https://jayuyu.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>春秋杯2025</title>
    <link href="https://jayuyu.github.io/posts/4f0/"/>
    <id>https://jayuyu.github.io/posts/4f0/</id>
    <published>2025-01-21T16:00:00.000Z</published>
    <updated>2025-03-25T14:28:22.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iiZJM">KoOh</h2><p><img src="/../image/1737127921565-d071b9c0-0e18-40ba-98ff-490f7327da61.png"></p><p>这道题如果先去找主函数的方法，来到了这里，是一个base64加密，点开那个参数<img src="/../image/1737127980725-7b64051b-c673-42da-8c22-dbcf7bc45658.png"></p><p>应该是base64加密变表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;zMXHz3TMywTLx2zSywCHzMfRzv9MBgfNiwzHA2vFzMXHzYeHiseHisf9&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"><span class="comment">#flag&#123;fake_flag!fake_flag!fake_flag!!!!!!!&#125;</span></span><br></pre></td></tr></table></figure><p>错误的flag，此时我们观察上图发现下面有一些字符串，看看交叉引用</p><p>发现有一大串代码是处于爆红状态，发现有花指令，这个时候反编译</p><p><img src="/../image/1737128271873-d18cfe27-9944-4037-abd3-5866cb180243.png"></p><p><img src="/../image/1737128207838-c4c711db-c645-44ed-8597-aa44e23a09b4.png"></p><p>此时看到这个hook，很明显是先解密那串很奇怪的字符串，解密之后是ida.exe,ollydbg等等，拍进程快照然后判断是不是在运行这些进程来反调试</p><p>这个时候如果发现在调试的化，就会退出，这里的方法就是将eax的值设置为0，其实我是静态看的。</p><p>之后发现了rc4的变种</p><p><img src="/../image/1737128428395-2b48b3a6-ff5f-4a53-ae92-67ee7f6900ee.png"></p><p>这里其实很明显的rc4，交exp</p><p>注意两个点：<br>1.这里的rc4加密魔改点是最后的异或变成了-</p><p>2.密钥被替代了</p><p>当我去跟踪这些散落的代码的时候，发现他们的最开始引用都是在Tlscallback函数里面，也就是说都先于主函数进行</p><p><img src="/../image/1737128680313-5a0d7bcc-5a04-48e0-a797-285fab8d5a42.png"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RC4初始化函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* s, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        k[i] = key[i % Len_k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RC4加解密函数</span></span><br><span class="line"><span class="comment">unsigned char* Data     加解密的数据</span></span><br><span class="line"><span class="comment">unsigned long Len_D     加解密数据的长度</span></span><br><span class="line"><span class="comment">unsigned char* key      密钥</span></span><br><span class="line"><span class="comment">unsigned long Len_k     密钥长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* Data, <span class="type">unsigned</span> <span class="type">long</span> Len_D, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span> <span class="comment">//加解密</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line">    rc4_init(s, key, Len_k);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len_D; k++) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">        tmp = s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = tmp;</span><br><span class="line">        t = (s[i] + s[j])%<span class="number">256</span> ;</span><br><span class="line">        Data[k] = (<span class="type">unsigned</span> <span class="type">char</span>)((<span class="type">int</span>)Data[k] +(<span class="type">int</span>)s[t]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//字符串密钥</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[] = <span class="string">&quot;DDDDAAAASSSS&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> key_len = <span class="keyword">sizeof</span>(key)<span class="number">-1</span> ;</span><br><span class="line">    <span class="comment">//数组密钥</span></span><br><span class="line">    <span class="comment">//unsigned char key[] = &#123;&#125;;</span></span><br><span class="line">    <span class="comment">//unsigned long key_len = sizeof(key);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加解密数据</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[] = &#123; <span class="number">0x18</span>, <span class="number">0x9C</span>, <span class="number">0x47</span>, <span class="number">0x3D</span>, <span class="number">0x3B</span>, <span class="number">0xE1</span>, <span class="number">0x29</span>, <span class="number">0x27</span>, <span class="number">0x9F</span>, <span class="number">0x34</span>,</span><br><span class="line">                            <span class="number">0x83</span>, <span class="number">0xD5</span>, <span class="number">0xED</span>, <span class="number">0xB5</span>, <span class="number">0x6E</span>, <span class="number">0x59</span>, <span class="number">0x7F</span>, <span class="number">0xDE</span>, <span class="number">0x47</span>, <span class="number">0xD7</span>,</span><br><span class="line">                            <span class="number">0x65</span>, <span class="number">0x3F</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x5B</span>, <span class="number">0x64</span>, <span class="number">0xB6</span>, <span class="number">0xFA</span>, <span class="number">0x94</span>, <span class="number">0x55</span>,</span><br><span class="line">                            <span class="number">0x87</span>, <span class="number">0x42</span>, <span class="number">0x20</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x69</span>, <span class="number">0xFE</span>, <span class="number">0x72</span>, <span class="number">0xA9</span>, <span class="number">0xE4</span>,</span><br><span class="line">                            <span class="number">0xD1</span>, <span class="number">0x7C</span></span><br><span class="line">                            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加解密</span></span><br><span class="line">    rc4_crypt(data, <span class="keyword">sizeof</span>(data), key, key_len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//zstuctf&#123;xXx_team_Is_GooD</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="tUfjA">ez_RE</h2><p><img src="/../image/1737207250507-82f8dc23-ed3b-47ff-87d6-fafcd6367159.png"></p><p>进来发现了一个随机数种子，跟md5有关，接着是一个异或随机数，这里点开生成种子看看</p><p><img src="/../image/1737207309017-dc42ecf5-c400-45ba-966e-9ba2bb449469.png"></p><p>这段代码的具体意思是将函数的前1024个字节当种子，这里可能操作系统不同的化，编译器不同，电脑不同</p><p> 代码中利用了 <code>custom_md5_init</code> 函数的<strong>内存布局</strong>作为加密输入的一部分。所谓“内存布局”，是指函数在运行时被加载到内存后，具体的机器指令、数据和偏移地址的排列形式。由于内存布局会受到编译器、操作系统、以及某些安全机制（例如地址空间随机化 ASLR）的影响，可能在不同运行环境下表现出不同的动态特性。  </p><p>那怎么办，可以试试爆破种子。但是必须在Linux环境去爆破，</p><p>具体Linux命令是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ac.cpp</span><br><span class="line">gcc ac.cpp -o ae</span><br><span class="line">如果是c++</span><br><span class="line">g++ ac.cpp -o ae</span><br><span class="line">./ae</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Enc[] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0x5C</span>, <span class="number">0x76</span>, <span class="number">0x4A</span>, <span class="number">0x78</span>, <span class="number">0x15</span>, <span class="number">0x62</span>, <span class="number">0x05</span>, <span class="number">0x7C</span>, <span class="number">0x6B</span>, <span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x40</span>, <span class="number">0x66</span>, <span class="number">0x5B</span>, <span class="number">0x1A</span>, <span class="number">0x48</span>, <span class="number">0x7A</span>, <span class="number">0x1E</span>, <span class="number">0x46</span>, <span class="number">0x7F</span>, <span class="number">0x28</span>,</span><br><span class="line"><span class="number">0x02</span>, <span class="number">0x75</span>, <span class="number">0x68</span>, <span class="number">0x2A</span>, <span class="number">0x34</span>, <span class="number">0x0C</span>, <span class="number">0x4B</span>, <span class="number">0x1D</span>, <span class="number">0x3D</span>, <span class="number">0x2E</span>,</span><br><span class="line"><span class="number">0x6B</span>, <span class="number">0x7A</span>, <span class="number">0x17</span>, <span class="number">0x45</span>, <span class="number">0x07</span>, <span class="number">0x75</span>, <span class="number">0x47</span>, <span class="number">0x27</span>, <span class="number">0x39</span>, <span class="number">0x78</span>,</span><br><span class="line"><span class="number">0x61</span>, <span class="number">0x0B</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Crack!!!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">0xB0000000</span>;i&lt;<span class="number">0xC0000000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">srand</span>(i);</span><br><span class="line"><span class="type">int</span> randlist[<span class="number">42</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">42</span>;j++)</span><br><span class="line">randlist[j]=<span class="built_in">rand</span>()%<span class="number">127</span>;</span><br><span class="line"><span class="keyword">if</span>(randlist[<span class="number">0</span>] == (<span class="number">0x5C</span>^<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">&amp;&amp; randlist[<span class="number">1</span>] == (<span class="number">0x76</span>^<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">&amp;&amp; randlist[<span class="number">2</span>] == (<span class="number">0x4A</span>^<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&amp;&amp; randlist[<span class="number">3</span>] == (<span class="number">0x78</span>^<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">&amp;&amp; randlist[<span class="number">4</span>] == (<span class="number">0x15</span>^<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">std::cout&lt;&lt;i&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"><span class="comment">//output: 3021285795</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个爆破范围不是很确定，应该可以慢慢试，就小32位，不是很大，</p><p>这里注意，因为这是linux文件，他们的c库不同，环境不同，所以exp必须在linux环境中跑</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;b799eb3a-59ee-4b3b-b49d-39080fc23e99&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;iiZJM&quot;&gt;KoOh&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/../image/1737127921565-d071b9c0-0e18-40ba-98ff-490f7327da61.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这道题如果先去找主函数的方法，来到了这里，是一个bas</summary>
      
    
    
    
    <category term="技术" scheme="https://jayuyu.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
